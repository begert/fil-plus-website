%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 8%%For: (Urs Zaugg) (Werbegrafik ASG)%%Title: (fil_plus blau.eps)%%CreationDate: (11/7/01) (10:41 AM)%%BoundingBox: 51 60 539 780%%HiResBoundingBox: 51.3477 60.5176 538.293 779.293%%DocumentProcessColors: Cyan Magenta Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%CMYKCustomColor: 1 1 0 0 (1)%%+ 0.47 0.11 0 0 (PANTONE 291 CVU)%%+ 1 0.56 0 0 (PANTONE 293 CVU)%%+ 0.76 0.09 0 0 (PANTONE 298 CVU)%%+ 1 0.43 0 0 (PANTONE 300 CVU)%%+ 0.72 0 0 0 (PANTONE 2985 CVU)%%+ 1 0.23 0 0.18 (PANTONE 3015 CVU)%%CMYKProcessColor: 1 1 1 1 ([Passermarken])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.504 0 0 0 0 0 0 0 0 131071 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () %AI3_TemplateBox: 297 420.5 297 420.5%AI3_TileBox: 8.5 9 585.5 798%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 595 842%AI5_RulerUnits: 1%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -41.1699 833.1089 1.2896 1146 827 18 1 1 6 42 0 0%AI5_OpenViewLayers: 7%%PageOrigin:8.5 9%%AI3_PaperRect:-9 798 586 -44%%AI3_Margin:9 -9 -9 44%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset AGM_Gradient_Sep 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient_Sep 5 dict dup begin put/AGM_Gradient_Sep_private 100 dict def/initialize{	AGM_Gradient_Sep begin	AGM_Gradient_Sep_private begin	_compositeJob{		initializeSinglePassSeps	}{		initializeMultiPassSeps	}ifelse	initializeSeps	AGM_Gradient_private begin		/_fillSD newSpotDict def		/_rampSD newSpotDict def		/_nCustomColorSD nd end	AGM_Gradient_Sep_private 	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient_Sep	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop	 end}def/terminate{	currentdict AGM_Gradient_Sep eq{	 end	}if}defAGM_Gradient_Sep_private begin/initializeSeps{	/currentoverprint { _of } def	_noImage not _level2PS not and{		/linealFill{			currentoverprint{				0 0 1 1 rectfill			}{				mySave				8 setImageParms				_color{					_nCustomColorSD begin						cyan magenta yellow black							_spotColor{							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put						}if				 end						4{						makeByte8 4 1 roll					}repeat					true 4 _nCustomColorSD ncolorimage				}{					_nCustomColorSD/black get 1 exch sub makeByte8 					_nCustomColorSD bwImage				}ifelse				myRestore			}ifelse		}def	}if	/_whiteBytes 1 makeByte8 pt	 /knockOut{		_noImage _level2PS or currentoverprint or{			gsave			false setoverprint			1 setgray 			0 0 1 1 rectfill			grestore		}{			8 setImageParms _whiteBytes /_image load 5 execImage		}ifelse	}def	/newSpotDict{		11 dict dup begin			/nSpots 2 def			/spot1 7 dict def			/spot2 7 dict def	 end	}def	/initSpotData	{	 begin			/name nd			/tintImage nd			/tintValue nd			/spot_C nd			/spot_M nd			/spot_Y nd			/spot_K nd	 end	}def	/initSpotDict{	 begin			/cyanInk nd			/magentaInk nd			/yellowInk nd			/blackInk nd			/cyan nd			/magenta nd			/yellow nd			/black nd			spot1 initSpotData			spot2 initSpotData	 end	}def	/copySpotDict{		/_dst xp	 begin			cyanInk magentaInk yellowInk blackInk			cyan magenta yellow black			spot1 spot2	 end		_dst begin			/spot1 spot1 maxlength dict def			/spot2 spot2 maxlength dict def			spot2 copy pop			spot1 copy pop			/black xd			/yellow xd			/magenta xd			/cyan xd			/blackInk xd			/yellowInk xd			/magentaInk xd			/cyanInk xd	 end	}def	/setCustomColor	{		1 index /Black eq{			6 1 roll 5 npop			1 exch sub			setgray		}{			6 1 roll _ccAry1 astore exch			dup null eq{				pop 0			}if			setcustomcolor		}ifelse	}def	/setCStop{		/_colorStyle exch pt				_colorStyle 0 eq{			0 0 0			4 -1 roll			1 exch sub			_spotColor{				/_colorStyle 3 pt				/Black				1 index				1 exch sub			}if		}if		_colorStyle 2 eq{			3 npop		}if		_rampSD _fillSD copySpotDict				_colorStyle 4 eq{ 			pop			9 2 roll 3 npop 6 -2 roll		} if				_colorStyle 3 eq _colorStyle 4 eq or{ 								_fillSD begin				/_spot1 spot1 pt				/_spot2 spot2 pt		 end						exch dup _spot1/name get eq{				_spot1 _spot2			}{				_spot2 _spot1			}ifelse		 begin			 begin					/name xd					1 exch sub /tintValue xd					4{						tintValue mul 4 1 roll					}repeat					_spotColor not{						/tintValue null def					}if			 end				/tintValue 0 def		 end		}if		_fillSD nsetcustomcolor	}def	/renderCMYK{		spot1/name get null eq		spot2/name get null eq and		dup not{			pop			spot1 spotConverted		}if		dup not{			pop			spot2 spotConverted		}if	}def	/currentInk{		true		_inRipSep{			currentcolorspace 0 get			dup /DeviceGray eq			1 index /DeviceCMYK eq or{				pop				currentcmykcolor add add add 0 eq{					pop false				}if			}{				/Separation eq{					currentcolor 0 eq{						pop false					}if				}if			}ifelse		}{			currentgray 1 eq{				pop false			}if		}ifelse	}def	/currentInkN{			_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end		{			currentInk		}{			gsave			_spot1 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			_spot2 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			grestore						or		} ifelse	}def	/fill_ /fill load def	/fillOvp{		currentoverprint{			_inRipSep{				currentcolorspace 0 get				dup /DeviceGray eq				1 index /DeviceCMYK eq or{					pop					currentcmykcolor add add add 0 eq{						newpath					}if				}{					/Separation eq{						currentcolor 0 eq{							newpath						}if					}if				}ifelse			}{				currentgray 1 eq{					newpath				}if			}ifelse		}if		fill_	}def	/fill{		_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end				{			fillOvp		}{			_spot1 begin				gsave				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor				}{					1 setgray				}ifelse				fillOvp 				grestore		 end			_spot2 begin				name null ne{					gsave					true setoverprint					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					fillOvp					grestore				}if		 end			newpath		}ifelse	}def	/expandSpot{		_spotColor{			/_len xp			_rampSD begin				spot1 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end				spot2 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end		 end		}{			pop		}ifelse	}def	/rampImage{		currentoverprint{			rectImage		}{			_enabledSmoothShade{				fillRamp			}{				_color{					_rampSD begin						/cyanInk _cyanData 0 ne def						/magentaInk _magentaData 0 ne def						/yellowInk _yellowData 0 ne def						/blackInk _blackData 0 ne def				 end										_nSamples setImageParms					_nSamples expandSpot					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 _rampSD ncolorimage				}{					_rampSD begin						/cyanInk false def						/magentaInk false def						/yellowInk false def						/blackInk true def				 end					_nSamples setImageParms 					_blackData _rampSD bwImage				}ifelse			}ifelse		}ifelse	}def	/nsetcustomcolor where{		pop	}{		/nsetcustomcolor		{			/_nCustomColorSD xp			_nCustomColorSD begin				4 copy				/black xd				/yellow xd				/magenta xd				/cyan xd				4 copy				0 ne /blackInk xd				0 ne /yellowInk xd				0 ne /magentaInk xd				0 ne /cyanInk xd		 end			setcmykcolor		}def	}ifelse	/nsetcustomcolorend where{		pop	}{		/nsetcustomcolorend		{			/_nCustomColorSD null pt		}def	}ifelse}def/initializeSinglePassSeps{	/_decodeNorm	[0 1] pt	/_decodeInvert 	[1 0] pt	/spotConverted	{	 begin			name null eq{				false			}{				tintValue null eq tintImage null eq and{					true				}{					false					currentpagedevice/SeparationColorNames get{name eq or}forall					not				}ifelse			}ifelse	 end	}def	/dictImage	{		20 dict dup begin			/Dict xd			/Decode xd			/DataSource xd			/ImageMatrix xd			/BitsPerComponent xd			/Height xd			/Width xd			/ImageType 1 def			Dict	 end		/_image load 1 execImage	}def	/bwImage{	 begin			gsave			currentoverprint{				blackInk{					[/Separation /Black /DeviceGray{}] setcolorspace					_decodeInvert dictImage				}{					5 npop				}ifelse			}{				/DeviceGray setcolorspace				_decodeNorm dictImage			}ifelse			grestore	 end	}def	/ncolorimage where{		pop	}{		/ncolorimage{		 begin				renderCMYK{					cyanInk 					magentaInk and					yellowInk and					blackInk and					not					currentoverprint 					and{							pop pop						gsave						cyanInk{							8 copy							[/Separation /Cyan /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}if						magentaInk{							8 copy							[/Separation /Magenta /DeviceGray{}] setcolorspace							4 -1 roll							3 npop							_decodeNorm dictImage						}if						yellowInk{							8 copy							[/Separation /Yellow /DeviceGray{}] setcolorspace							4 -2 roll							3 npop							_decodeNorm dictImage						}if						blackInk{							4 -3 roll							[/Separation /Black /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}{							8 npop						}ifelse						grestore					}{						/_colorimage load 10 execImage					}ifelse				}{					6 npop					gsave					spot1 begin						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							4 copy							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							1 setgray fill						}ifelse				 end					spot2 begin						true setoverprint						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							4 npop							1 setgray fill						}ifelse				 end					grestore				}ifelse		 end		}def	}ifelse	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_renderCMYK not{			_rampSD begin				[/DeviceN 					[					spot1 begin						name null ne tintImage null ne and{							name						}if				 end					spot2 begin						name null ne tintImage null ne and{							name						}if				 end					] /DeviceCMYK {}				] setcolorspace		 end			/_nColorSpace currentcolorspace pt		}if				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C0_Space _nColorSpace pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C1_Space _nColorSpace pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}def/initializeMultiPassSeps{	/invertXfer{		[		{			1 exch sub		}/exec load systemdict /currenttransfer get exec /exec load		] cvx systemdict /settransfer get exec	}def	/ccThrough{		gsave		1 setCustomColor		currentcmykcolor		grestore		add add add 0 ne	}def	/spotConverted	{	 begin			_isCMYKSep not{				false			}{				name null eq{					false				}{					tintValue null eq tintImage null eq and{						true					}{						spot_C spot_M spot_Y spot_K name ccThrough					}ifelse				}ifelse			}ifelse	 end	}def	/spotChannel	{		_isCMYKSep{			pop false		}{			/_spotDict xp				_spotDict/name get null eq{					false				}{					_spotDict/spot_C get					_spotDict/spot_M get					_spotDict/spot_Y get					_spotDict/spot_K get					_spotDict/name get					ccThrough 				}ifelse		}ifelse	}def	/getChannelData	{		_isCMYKSep dup{			pop renderCMYK		}if		{			_blackPlate{				4 1 roll 3 npop blackInk			}{				_yellowPlate{					4 2 roll 3 npop yellowInk				}{					_magentaPlate{						4 3 roll 3 npop magentaInk					}{						3 npop cyanInk					}ifelse				}ifelse			}ifelse			{				true /nonZeroData			}{				true /zeroData			}ifelse		}{			4 npop			spot1/name get null ne 			spot1 spotChannel and{				spot1/tintImage get dup null ne{					false /nonZeroData				}{					pop false /noData				}ifelse			}{				spot2/name get null ne 				spot2 spotChannel and{					spot2/tintImage get dup null ne{						false /nonZeroData					}{						pop false /noData					}ifelse				}{					false /noData				}ifelse			}ifelse		}ifelse	}def	/renderChannelData	{		/_tmp xp		_tmp /nonZeroData ne currentoverprint and{			pop			_tmp /zeroData eq{pop}if			4 npop		}{			_tmp /nonZeroData eq{				{					invertXfer				}if					systemdict/image				get 5 execImage			}{				pop				_tmp /zeroData eq{pop}if				4 npop				knockOut			}ifelse		}ifelse	}def	/bwImage{	 begin			gsave			dup dup dup			getChannelData			exch pop false exch			renderChannelData			grestore	 end	}def	/ncolorimage{	 begin			pop pop			gsave			spot2/name get null ne spot2 spotChannel and{				true setoverprint			}if			getChannelData 			renderChannelData			grestore	 end	}def	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if				_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					0					spot1 begin 						name null ne						tintValue null ne and						spot1 spotChannel and{							pop tintValue						}if				 end					spot2 begin 						name null ne						tintValue null ne and						spot2 spotChannel and{							pop tintValue						}if				 end					1 exch sub			 end			] pt			/_C0_Space /DeviceGray pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if				_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					0					spot1 begin 						name null ne						tintValue null ne and						spot1 spotChannel and{							pop tintValue						}if				 end					spot2 begin 						name null ne						tintValue null ne and						spot2 spotChannel and{							pop tintValue						}if				 end					1 exch sub			 end			] pt			/_C1_Space /DeviceGray pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}defendenddefaultpacking setpacking%%EndResource%%BeginResource: procset AGM_Gradient 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient 20 dict dup begin put/AGM_Gradient_private 200 dict def/initialize{	AGM_Gradient begin	AGM_Gradient_private begin	initializeVars		/bd systemdict/mark get def	/ed		_level2PS 		{			(>>)		}{			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)		} ifelse	cvx def		_level2PS{		initializeLev2	}{		initializeLev1	}ifelse		queryDevice		initializeRectFill	initializeShading	initializeOps	_producingSeps{		AGM_Gradient_Sep/initialize get exec	}{		initializeComposite	}ifelse	_illustrator{		/f{}def		/F{}def		/s{}def		/S{}def		/b{}def		/B{}def	}if	/image where{		/image get /_image xd	}if	/colorimage where{		/colorimage get /_colorimage xd	}if	AGM_Gradient_private	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop end}def/initializeAI{	pop pop 	AGM_Gradient/AGM_Gradient_private get /_illustrator true put	AGM_Gradient/initialize get exec		AGM_Gradient begin}def/unload{	systemdict/languagelevel known{		systemdict/languagelevel get 2 ge{			userdict/AGM_Gradient_Sep 2 copy known{				undef			}{				pop pop			}ifelse			userdict/AGM_Gradient 2 copy known{				undef			}{				pop pop			}ifelse		}if	}if}def/terminate{	currentdict AGM_Gradient eq{	 end	}if}def AGM_Gradient_private begin/initializeVars{	/_d255 256 array def	0 1 255{		_d255 exch dup 255 div put	}bind for	/_d255- 256 array def	0 1 255{		_d255- exch 1 _d255 2 index get sub put	}bind for	/_sSave nd	/_dUserSpace matrix defaultmatrix def	/_bUMatrix matrix def	/_imageMatrix matrix def	/_saveMatrix matrix def	/_xm matrix def	/_ccAry1 5 array def	/_bbox 4 array pt	/_level2PS 		systemdict/languagelevel known dup{			pop systemdict/languagelevel get 2 ge		}if	def	/_level3PS		_level2PS systemdict/shfill known and	def	currentdict /_illustrator known not{		/_illustrator false def	}if	}def/initializeOps{	AGM_Gradient begin	currentdict/Bc known not{		/Bc{					_renderFlag 2 eq _enabledSmoothShade or{				6 npop			}{				pushBSpace				_rampIndex 0 eq{					pop pop					setCStop				}if				linealFill				popBSpace			}ifelse				}def	}if		currentdict/Bg known not{		/Bg{			10 npop			/_gradName xp			/_renderFlag xp			/_enabledSmoothShade false pt					_renderFlag 2 ne{						_illustrator{					_of setoverprint				}if						/_enabledSmoothShade 					_level3PS{						_usingSmoothShade						_producingSeps not						currentoverprint not or and						_noImage not and					}{						false					}ifelse				pt								_illustrator _eo and _renderFlag 3 eq or{					eoclip				}{					clip				}ifelse						_gradNames _gradName 2 copy known{					get					mark exch aload pop					/_gradType xp					1 sub dup /_rampIndex xp					/_maxRampIndex xp					mark exch aload pop					0 0				}if				pop pop				getRampData			}{				mark mark			}ifelse		}def	}if		currentdict/Bm known not{		/Bm{			_renderFlag 2 ne{				_gradType 0 eq{					linealRamp				}{					radialGrad				}ifelse			}{				6 npop			}ifelse		}def	}if		currentdict/Bh known not{		/Bh{			2 npop			/_yHi xp			/_xHi xp			/_radHilite _xHi 0 ne _yHi 0 ne or pt		}def	}if		currentdict/Bn known not{		/Bn{			AGM_Gradient_private begin				dict /_gradNames xp		 end		}def	}if		currentdict/Bd known not{		/Bd{			AGM_Gradient begin			AGM_Gradient_private begin				/_nColorsBd xp				/_gradType xp				/_gradName xp		}def	}if		currentdict/BD known not{		/BD{				currentdict/_gradNames known not{					/_gradNames 20 dict def				}if				] _nColorsBd _gradType				]  _gradName exch /_gradNames xput		 end		 end		}def	}if		currentdict/Bb known not{		/Bb{					AGM_Gradient/AGM_Gradient_private get /_illustrator get not{				AGM_Gradient begin			}if			AGM_Gradient_private begin			_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin			}if			mySave		}def	}if		currentdict/BB known not{		/BB{					/_tmp xp			cleartomark cleartomark					_tmp dup			_renderFlag					myRestore					_producingSeps{			 end			}if					_illustrator dup		 end			not {			 end			}if					{				2 ne exch 0 gt and{					2 eq{						s					}{						S					}ifelse				}{					pop newpath				}ifelse			}{				pop newpath			}ifelse						}def	}if		currentdict/Xm known not{		/Xm{			_xm astore pop		}def	}if	 end}def/queryDevice{	/_inRipSep		_level2PS{			currentpagedevice/Separations 2 copy known{				get			}{				pop pop false			}ifelse		}{			false		}ifelse	def	/_noImage /lv1Fix where{		pop lv1Fix	}{		false	}ifelse	def	/_useShells where{		/_useShells get /_usingShells xp	}{		/_usingShells false def	}ifelse		/_useSmoothShade where{		pop	}{		/_useSmoothShade false def 	}ifelse	/_forceToCMYK where{		pop	}{		/_forceToCMYK false def 	}ifelse	/_cyanPlate 1 0 0 0 testCMYKColorThrough def	/_magentaPlate 0 1 0 0 testCMYKColorThrough def	/_yellowPlate 0 0 1 0 testCMYKColorThrough def	/_blackPlate 0 0 0 1 testCMYKColorThrough def	/_compositeJob		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and	def	/_isCMYKSep		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or	def	/_compositeSpotDevice where{		pop	}{		/_compositeSpotDevice _compositeJob not _inRipSep or{			1		}{			0		}ifelse		def	}ifelse	/_producingSeps _compositeSpotDevice 0 ne def	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/_dpiThreshold where{		pop	}{		/_dpiThreshold 600 def	}ifelse	/_screenFreqThreshold where{		pop	}{		/_screenFreqThreshold 150 def	}ifelse	/_contoneDevice where{		pop	}{		/_contoneDevice false def	}ifelse	/_subSampleOK 		_deviceDPI _dpiThreshold le 		currentScreenFreq _screenFreqThreshold le and 		_contoneDevice not and 	def}def/initializeRectFill{	/rectfill where dup{		exch pop not _producingSeps or	}{		not	}ifelse	{		/rectfill{			gsave			newpath			4 2 roll moveto			1 index 0 rlineto			0 1 index rlineto			1 index neg 0 rlineto			pop pop			closepath			fill			grestore		}def	}if}def/initializeLev1{	/currentScreenFreq{		currentscreen pop pop	}def	/_byte 1 string def	/colorimage where{		pop	}{		/colorimage{			pop pop			/_blackTmp xp			/_yellowTmp xp			/_magentaTmp xp			/_cyanTmp xp			/_cnt 0 pt			[			_byte dup 0			_cyanTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx			_magentaTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx			_yellowTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx			_blackTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/dup cvx 1 /gt cvx{				pop 1			}/if cvx			255 /mul cvx /cvi cvx			256 /mod cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/put cvx			/_cnt dup cvx 1 /add cvx /pt cvx			] cvx			bind			/_image load 5 execImage		}def	}ifelse}def/initializeLev2{	/level2ScreenFreq{	 begin		60		HalftoneType 1 eq{			pop Frequency		}if		HalftoneType 2 eq{			pop GrayFrequency		}if		HalftoneType 5 eq{			pop Default level2ScreenFreq		}if		 end	}def	/currentScreenFreq{		currenthalftone level2ScreenFreq	}def}def/initializeShading{	_useSmoothShade _level3PS and{		/_usingSmoothShade true pt		initializeLev3_Ops	}{		/_usingSmoothShade false pt	}ifelse}def/initializeLev3_Ops{	/initShFill{		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt		/_rampFuncsArray _maxRampIndex array pt		/_boundsArray _maxRampIndex 1 sub array pt		/_encodeArray _maxRampIndex 2 mul array pt		/_beginCoord _rampPoint pt		/_colorSpace null pt		/_firstFill _rampIndex _maxRampIndex eq pt		/_lastFill false pt	}def	/linealShFill{		popBSpace		_xm aload pop pushBSpace				/_size _index 1 add pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt		}if				bd			/ShadingType 2			/ColorSpace _colorSpace			_rgbInCMYK{				/Function [					_cData sampFunc					_mData sampFunc					_yData sampFunc					_kData sampFunc				]			}{				/Function 					bd						/FunctionType 3						/Domain [0 1]						/Functions _rampFuncsArray						/Bounds _boundsArray						/Encode _encodeArray					ed			}ifelse			/Extend [_firstFill _lastFill]			/Domain [0 1] 			/Coords [_beginCoord 0 _endCoord 0]		ed		shfill	}def		/radialShFill{		/_size _maxRampIndex _index sub pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt			/_boundsArray _boundsArray _index _size 1 sub getinterval pt			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt		}if				/_rampLen _beginCoord _endCoord sub pt		bd			/ShadingType 3			/ColorSpace _colorSpace			_rgbInCMYK{				/Function [					_cData sampFunc					_mData sampFunc					_yData sampFunc					_kData sampFunc				]			}{				/Function 					bd						/FunctionType 3						/Domain [0 1]						/Functions _rampFuncsArray						/Bounds _boundsArray						/Encode _encodeArray					ed			}ifelse			/Extend [_lastFill _firstFill]			/Domain [0 1] 			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 		ed		shfill				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if	}def		%	/sampFunc{		/_tmp exch pt		bd			_tmp length 1 eq {				_tmp 0 get				/_tmp 2 string pt				dup _tmp 0 3 -1 roll put				_tmp 1 3 -1 roll put			}if			/FunctionType 0			/Order 1			/Size [_tmp length]			/Domain [0 1]			/BitsPerSample 8			/DataSource _tmp			/Range [0 1]		ed	}def		/fillRamp{				/_invert _midPoint 0.5 lt pt		_rampIndex _maxRampIndex eq {			initShFill		}if				getRampColorSpace				_colorSpace null eq{			/_colorSpace _rampColorSpace pt		}{			_colorSpace _rampColorSpace ne _rgbInCMYK or{				/_index _index 1 				_gradType 0 eq{					sub pt					linealShFill				}{					add pt					radialShFill				}ifelse				initShFill				/_colorSpace _rampColorSpace pt			} if		}ifelse		/_endCoord _endPoint pt			/_rgbInCMYK false pt		_producingSeps _forceToCMYK or _rgbRamp and {			_spotColor{				_renderCMYK			}{				_isCMYKSep			}ifelse		}{			false		}ifelse		{			_compositeJob{				/_rgbInCMYK true pt				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor				dup length string copy /_kData exch pt				dup length string copy /_yData exch pt				dup length string copy /_mData exch pt				dup length string copy /_cData exch pt			}{				_rampFuncsArray _index					_cyanPlate{_cyanData}if						_magentaPlate{_magentaData}if						_yellowPlate{_yellowData}if						_blackPlate{_blackData}if					_nSamples expandOne					sampFunc					dup begin /Decode [1 0] def end				put				/_invert false pt			}ifelse		}{			_rampFuncsArray _index				bd					/FunctionType 2					/Domain [0 1]					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div					_gradType 0 eq{						_invert{/C1}{/C0}ifelse _C0						_invert{/C0}{/C1}ifelse _C1					}{						_invert{/C0}{/C1}ifelse _C1						_invert{/C1}{/C0}ifelse _C0					}ifelse				ed			put		}ifelse				_rampIndex 1 ne{			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put		} if				0 1 _invert {exch}if		_encodeArray _index 2 mul 1 add 3 -1 roll put		_encodeArray _index 2 mul 3 -1 roll put		_rampIndex 1 eq {			/_lastFill true pt			_gradType 0 eq{				linealShFill			}{				radialShFill			}ifelse		}if		/_index _index 1 		_gradType 0 eq{			add pt		}{			sub pt		}ifelse	}def}def/initializeComposite{	/bwImage{		pop /_image load 5 execImage 	}def	/rampImage{		_enabledSmoothShade{			fillRamp		}{			_color{				_nSamples setImageParms									_rgbRamp _forceToCMYK not and{					_redData _greenData _blueData _nSamples 3 expandColor					true 3 null ncolorimage				}{					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 null ncolorimage				}ifelse			}{				_nSamples setImageParms _blackData null bwImage			}ifelse		}ifelse	}def	/setCStop{		/_colorStyle exch pt		_colorStyle 0 eq{			1 exch sub			0 0 0			4 -1 roll		}if				_colorStyle 2 eq{			_forceToCMYK{				3 npop setcmykcolor			}{				setrgbcolor 4 npop			}ifelse		}if				_colorStyle 3 eq{			1 exch sub /_tmp xp			pop			4{				_tmp mul 4 1 roll			}repeat		}if				_colorStyle 4 eq{			_forceToCMYK{				6 npop setcmykcolor			}{				3 -1 roll pop pop				1 exch sub /_tmp xp				3{					1 exch sub _tmp mul 1 exch sub 3 1 roll				}repeat				setrgbcolor 				4 npop			}ifelse		}if		_colorStyle 2 ne _colorStyle 4 ne and{			null nsetcustomcolor		}if	}def	/nsetcustomcolor	{		pop setcmykcolor	}def	/nsetcustomcolorend	{	}def	/ncolorimage{		pop 		/_colorimage load 10 execImage	}def	_noImage not _level2PS not and{		/linealFill{			8 setImageParms			_color{				currentcmykcolor				4{					makeByte8 4 1 roll				}repeat				true 4 null ncolorimage			}{				currentgray makeByte8 null bwImage			}ifelse		}def	}if	/getRampColorSpace{		_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		/_C0 [currentcolor] pt		/_C0_Space currentcolorspace pt				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		/_C1 [currentcolor] pt		/_C1_Space currentcolorspace pt				/_rampColorSpace _C0_Space pt				_spotColor{			nsetcustomcolorend		}if	}def}def/npop{	{pop}repeat}def/xd{	exch def}def/nd{	null def}def/pt{	AGM_Gradient_private 3 1 roll put}def/xp{	exch pt}def/xput{	dup load dup length exch maxlength eq{		dup dup load dup		length 2 mul dict copy def	}if	load begin		def  end}def/mySave{	save /_sSave xp}def/myRestore{	_sSave type /savetype eq{		_sSave restore	}if}def/gMark{	counttomark 2 add -1 roll}def/execImage{	/_tmp xp	{		exec	}stopped{		$error /errorname get /undefinedresult ne{			stop		}{			_tmp npop		}ifelse	}if}def/pushBSpace{	newpath gsave	_bUMatrix astore concat }def/popBSpace{	grestore}def/makeByte8{	/_tmp 0 pt	255 mul cvi	8 string 8{		dup _tmp 3 index put 		/_tmp _tmp 1 add pt	}repeat	exch pop}def/setImageParms{	1 8 2 index 0 0 1 0 0 _imageMatrix astore}def/linealFill{	0 0 1 1 rectfill}def/testCMYKColorThrough{	gsave	setcmykcolor currentcmykcolor	grestore	add add add 0 ne}def/expandOne	{	/_tmp xp	dup type /stringtype ne{		_tmp string		exch		dup 0 ne{			255 mul cvi			0 1 _tmp 1 sub{				3 copy				exch put pop			}for		}if		pop	}if}def/expandColor{	/_channels xp	/_len xp	_channels{		_len expandOne _channels 1 roll	}repeat}def/blendColor{		_color{		_rgbRamp _producingSeps not and _forceToCMYK not and{			_redData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_greenData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blueData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			/setrgbcolor cvx		}{			_cyanData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_magentaData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_yellowData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blackData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if				_spotColor{				_rampSD begin					/_rampSD cvx /begin cvx						spot1 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx						spot2 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/_rampSD cvx				/nsetcustomcolor cvx			}{				/setcmykcolor cvx			}ifelse		}ifelse	}{		_blackData dup type /stringtype eq{			/_ndx cvx /get cvx _d255 /exch cvx /get cvx		}if				_enabledSmoothShade{			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx		}{			 /setgray cvx		}ifelse	}ifelse}def/useRectImage{	_subSampleOK _enabledSmoothShade not and{		{			mark			0 1 dtransform atan cvi 90 mod 0 eq			1 0 dtransform atan cvi 90 mod 0 eq		} stopped		{			cleartomark			false		}		{			and exch pop		} ifelse	}{		false	}ifelse}def/linealImage{	_noImage{		rectImage	}{		_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get				/rampImage get exec		}{			useRectImage{				rectImage			}{				rampImage			}ifelse		}ifelse	}ifelse}def/linealRamp{	pushBSpace	_ramp{		linealImage	}{		linealFill	}ifelse	popBSpace	/_rampIndex _rampIndex 1 sub pt	_rampIndex 0 gt{		getRampData	}if}def/radialGrad{	/_usingShells currentoverprint _producingSeps and _usingShells or pt	/_firstShell true pt	_enabledSmoothShade not{		currentoverprint _producingSeps and{						newpath			clippath pathbbox 			1 add 4 1 roll			1 add 4 1 roll			1 sub 4 1 roll			1 sub 4 1 roll			_bbox astore pop						newpath			_bbox 0 get _bbox 1 get moveto			_bbox 2 get _bbox 1 get lineto			_bbox 2 get _bbox 3 get lineto			_bbox 0 get _bbox 3 get lineto			closepath			6 copy			gsave _bUMatrix astore concat			1 0 moveto 0 0 1 0 360 arc closepath			eoclip fill			popBSpace		}{			fill		}ifelse	}if	pushBSpace		_radHilite{		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp		_rampPoint 1 lt{			1 _rampPoint sub dup _xHi mul exch _yHi mul translate		}if	}if	_rampIndex{		radialRamp		/_rampIndex _rampIndex 1 sub pt		_rampIndex 0 gt{			getRampData		}if	}repeat		popBSpace	}def/getNSamples{	0 exch	{		dup type /stringtype eq{			length exch pop exit		}if		pop	}forall	dup 0 eq{		pop 1	}if}def/getRampData{	/_rampType gMark pt	/_color _rampType 0 gt pt	/_ccRGB _rampType 5 eq _rampType 6 eq or pt	/_rgbRamp _rampType 4 eq _ccRGB or pt	/_ccProcess _rampType 2 eq _rampType 3 eq or pt	_producingSeps{		_rampSD initSpotDict		/_spotColor _ccProcess _ccRGB or pt	}{		/_spotColor false pt	}ifelse	/_ramp true pt	100 div /_rampPoint xp	100 div /_midPoint xp		dup /_colorStyle xp	_colorStyle 0 eq{ 		2	}{		_colorStyle 1 eq{ 			5		}{			_colorStyle 2 eq{				8			}{				_colorStyle 3 eq{					_producingSeps{						_rampSD /spot1 get begin							/name 3 index def							/spot_K 4 index def							/spot_Y 5 index def							/spot_M 6 index def							/spot_C 7 index def					 end					}if					7				}{					_producingSeps{						_rampSD/spot1 get begin							/name 4 index def							/spot_K 8 index def							/spot_Y 9 index def							/spot_M 10 index def							/spot_C 11 index def					 end					}if					11				} ifelse			}ifelse		}ifelse	}ifelse	/_tmp xp	_tmp index 100 div /_endPoint xp		_gradType 1 eq{		_tmp 1 add index 100 div /_midPoint xp	}if		_producingSeps{		_tmp 2 add index /_nextColorStyle xp		_nextColorStyle 3 eq{			/_tmp _tmp 4 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 2 add index def					/spot_Y _tmp 3 add index def					/spot_M _tmp 4 add index def					/spot_C _tmp 5 add index def			 end			}{				pop			}ifelse		}if		_nextColorStyle 4 eq{			/_tmp _tmp 5 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 5 add index def					/spot_Y _tmp 6 add index def					/spot_M _tmp 7 add index def					/spot_C _tmp 8 add index def			 end			}{				pop			}ifelse		}if	}if	_rampType 3 eq _rampType 6 eq or{		/_tint2Data gMark pt	}if	_ccProcess _ccRGB or{		/_tint1Data gMark pt	}if	_rgbRamp{		/_blueData gMark pt		/_greenData gMark pt		/_redData gMark pt	}if		_producingSeps{		_ccProcess _ccRGB or{			_rampType 3 eq _rampType 6 eq or{				_rampSD /spot2 get begin					/tintImage _gradType 0 eq{						_tint2Data					}{						_tint1Data					}ifelse					def					name null eq{						/name /Black def					}if			 end			}if			_rampSD /spot1 get begin				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{					_tint1Data				}{					_tint2Data				}ifelse				def				_rampType 2 eq _rampType 5 eq or{					name null eq{						/name _rampSD/spot2 get /name get def						/spot_C _rampSD/spot2 get /spot_C get def						/spot_M _rampSD/spot2 get /spot_M get def						/spot_Y _rampSD/spot2 get /spot_Y get def						/spot_K _rampSD/spot2 get /spot_K get def						_rampSD/spot2 get /name null put					}if				}{					name null eq{						/name /Black def					}if				}ifelse		 end		}if	}if	/_blackData gMark pt	_rampType 0 gt{		counttomark 4 add -3 roll		/_yellowData xp		/_magentaData xp		/_cyanData xp	}if	_ramp{		/_nSamples			[			_rampType 0 eq {_blackData}if			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if			] getNSamples pt		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if	} if		setCStop}def/rectImage{	gsave	/_sInc 1 pt	/_bInc 1 _nSamples div pt	/_nSubSamples _nSamples pt	/_optimize false pt			_subSampleOK{		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt				_pChange .5 gt dup /_optimize xp{			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc 1 _nSubSamples div pt			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt		}if	}if	0	_nSubSamples	[	/dup cvx	_optimize {		/round cvx /cvi cvx	} if	/_ndx /exch cvx /pt cvx	blendColor	0 0 _bInc 1 /rectfill cvx	_bInc 0 /translate cvx	_sInc /add cvx	] cvx	bind	repeat	pop	_spotColor{		nsetcustomcolorend	}if	grestore}def/radialInit{	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt	/_sInc -1 pt	/_rampLen _rampPoint _endPoint sub pt	/_bInc _rampLen _nSamples div neg pt	/_optimize false pt	_subSampleOK{		/_uRampLen			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			2 copy lt{				exch			}if pop		pt		/_pChange 			_uRampLen 0 eq{				0			}{				_nSamples _uRampLen div			}ifelse		pt		_pChange .5 gt dup /_optimize xp{			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc _rampLen _nRadSamples div neg pt			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt		}if	}if	_radHilite{		/_xBCInc _xHi _rampLen mul _nRadSamples div pt		/_yBCInc _yHi _rampLen mul _nRadSamples div pt	}if}def/radialRamp{	_enabledSmoothShade{		fillRamp	}{		/_saveMatrix _saveMatrix currentmatrix def				radialInit			%		%		true		_producingSeps _rgbRamp not and{			_nSamples 1 gt{ 				pop				/_ndx 0 pt				[blendColor] cvx exec				currentInkN				/_ndx _nSamples 1 sub pt				[blendColor] cvx exec				currentInkN				or			}if		}if		{			_rampPoint					_nSamples 1 sub					_nRadSamples 			[				/dup cvx						_optimize{					/round cvx /cvi cvx				}if						/_ndx /exch cvx /pt cvx								_usingShells{					/_firstShell cvx{						/_firstShell false pt					}{						0 0 3 index 360 0 arcn fill					}/ifelse cvx				}if						blendColor						_usingShells{					0 0 3 /index cvx 0 360 /arc cvx 				}{					0 0 3 /index cvx 0 360 /arc cvx /fill cvx				}ifelse						/exch cvx _bInc /add cvx /exch cvx						_sInc /add cvx						_radHilite{					_xBCInc _yBCInc /translate cvx				}if			] cvx bind			repeat					pop pop		}{			_usingShells{				0 0 _rampPoint 360 0 arcn fill			}if		}ifelse			_saveMatrix setmatrix				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if				_usingShells _rampIndex 1 eq and{			fill		}if			_spotColor{			nsetcustomcolorend		}if	}ifelse}defendenddefaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 53 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 41 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIBuffer3 null def	/XIDataProc null def	/XIColorSpace /DeviceGray def	/XIColorValues 0 def	/XIPlateList false defend/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def/ci6image systemdict /image get def/ci6curtransfer systemdict /currenttransfer get def/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def/ci6foureq {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/ci6testplate {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 ci6foureq { 				/plateindex 0 def			}{				0 1 0 0 ci6foureq { 					/plateindex 1 def				}{					0 0 1 0 ci6foureq {						/plateindex 2 def					}{						0 0 0 1 ci6foureq { 							/plateindex 3 def						}{							0 0 0 0 ci6foureq {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/ci6concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/ci6istint {	type /arraytype eq } def/ci6isspot {	dup type /arraytype eq {		dup length 1 sub get /Separation eq	}{		pop false	} ifelse} def/ci6spotname {	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse} def/ci6altspace {	aload pop pop pop ci6colormake} def/ci6numcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/ci6marksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				dup ci6isspot {					/findcmykcustomcolor where {						pop						dup length 2 sub get						0.1 0.1 0.1 0.1 5 -1 roll						findcmykcustomcolor 1 setcustomcolor						systemdict /currentgray get exec						1 ne					}{						pop plateindex 5 ne					} ifelse				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/ci6colormake {	dup ci6numcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/ci6colorexpand {	dup ci6spotname exch	dup ci6istint {		ci6altspace		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/ci6colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/ci6colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				ci6altspace ci6colortint ci6colortocmyk			} ifelse		} ifelse	} ifelse} def/ci6makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/ci6stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/ci6stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/ci6stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/ci6walkrgbstring {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/ci6walkcmykstring{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/ci6putrgbtograystr{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/ci6putcmyktograystr{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/ci6rgbtograyproc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putrgbtograystr load exch		ci6walkrgbstring end} def/ci6cmyktograyproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putcmyktograystr load exch		ci6walkcmykstring end} def/ci6separatecmykproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec				XIBuffer3				0 2 index				plateindex 4 2 index length 1 sub {			get 255 exch sub						3 copy put pop 1 add						2 index		} for		pop pop exch pop end} def	/ci6compositeimage {	dup 1 eq {		pop pop image	}{		/ci6colorimage load null ne {			ci6colorimage		}{			3 1 roll pop			sourcearray 0 3 -1 roll put			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load			image		} ifelse	} ifelse} def/ci6knockoutimage {	gsave	0 ci6curtransfer exec 1 ci6curtransfer exec	eq {		0 ci6curtransfer exec 0.5 lt	}{		0 ci6curtransfer exec 1 ci6curtransfer exec gt	} ifelse	{{pop 0}}{{pop 1}} ifelse	systemdict /settransfer get exec	ci6compositeimage	grestore} def/ci6drawimage {	ci6testplate -1 eq {		pop ci6compositeimage	}{		dup type /arraytype eq {			dup length plateindex gt {plateindex get}{pop false} ifelse		}{			{				true			}{				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse			} ifelse		} ifelse		{			dup 1 eq {				pop pop ci6image			}{				dup 3 eq {					ci6compositeimage				}{					pop pop					sourcearray 0 3 -1 roll put					/ci6separatecmykproc load					ci6image				} ifelse			} ifelse		}{			ci6curoverprint {				7 {pop} repeat			}{				ci6knockoutimage			} ifelse		} ifelse	} ifelse} def/ci6proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace ci6numcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] ci6makeimagedict ci6image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] ci6makeimagedict ci6image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} ci6stringapply			} ci6concatprocs ci6image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} ci6stringapply			} ci6concatprocs false _pticomps			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse		} ifelse	} ifelse} def/ci6graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray ci6proctintimage} def/ci6cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK ci6proctintimage} def/ci6rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB ci6proctintimage} def/ci6tintimage {	ci6testplate -1 eq {		ci6colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop ci6graytintimage		}{			dup /DeviceRGB eq {				pop ci6rgbtintimage			}{				pop ci6cmyktintimage			} ifelse		} ifelse	}{		dup ci6marksplate {			plateindex 5 lt {				ci6colortocmyk plateindex get				dup 0 eq ci6curoverprint and {					7 {pop} repeat				}{					1 exch sub					exch {1 0}{0 1} ifelse () ci6graytintimage				} ifelse			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage			} ifelse		}{			ci6curoverprint {				8 {pop} repeat			}{				pop pop pop				{pop 1} 0 1 () /DeviceGray ci6proctintimage			} ifelse		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace ci6tintimage} def/XIImage {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	false XIChannelCount XIPlateList ci6drawimage} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				/_lp /null ddef		_fc		/_lp /imagemask ddef end} def/XH {	Adobe_ColorImage_AI6_Vars begin		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		ci6colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XIPlates {	Adobe_ColorImage_AI6_Vars begin		/XIPlateList exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEnable {			/XIBuffer3 XIImageWidth string def			XICompression 0 eq {				/XIBuffer1 XIRowBytes string def				XIEncoding 0 eq {					{currentfile XIBuffer1 readhexstring pop}				}{					{currentfile XIBuffer1 readstring pop}				} ifelse			}{				/XIBuffer1 256 string def				/XIBuffer2 XIRowBytes string def				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}				/ASCII85Decode filter /DCTDecode filter				/XIFile exch def				{XIFile XIBuffer2 readstring pop}			} ifelse			/XIDataProc exch def						XIType 1 ne {				0 setgray			} if			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		/XIPlateList false def		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)%%Version: 1.3 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 112 dict dup beginput/_?cmyk false def/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 100 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	/_aicmykps where {pop /_?cmyk _aicmykps def}if	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/_rgbtocmyk{	3	{		1 exch sub 3 1 roll	} repeat	3 copy 1 4 1 roll	3	{		3 index 2 copy gt		{			exch		} if		pop 4 1 roll	} repeat	pop pop pop	4 1 roll	3	{		3 index sub		3 1 roll	} repeat	4 -1 roll} def/setrgbfill{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/setrgbstroke{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_?cmyk {		3 npop k	}{		setrgbfill 4 npop	} ifelse} def/XA{	_?cmyk {		3 npop K	}{		setrgbstroke 4 npop	} ifelse} def/Xs{	/_gf exch ddef	5 npop	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setAIseparationgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XS{	/_gs exch ddef	5 npop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setAIseparationgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xx{	exch	/_gf exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/XK{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		K	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		XA	} ifelse} def/Xk{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		k	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		Xa	} ifelse} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/Xt {	pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			endString eq {				cleartomark stop			} if		}ifelse	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			dup beginString eq			{				pop /layerCnt dup load 1 add store			}			{				endString eq				{					layerCnt 1 eq					{						cleartomark stop					}					{						/layerCnt dup load 1 sub store					} ifelse				} if			} ifelse		}ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	6 npop	7 2 roll	5 npop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popend/XP{	4 npop} bind def/XD{	pop} bind defendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_shading_AI8 1.0 0%%Title: (Adobe Illustrator 8 Shading Procset)%%Version: 1.0 0%%CreationDate: (12/17/97) ()%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_shading_AI8 10 dict dup begin put/initialize {	Adobe_shading_AI8 begin	Adobe_shading_AI8 bdprocs	Mesh /initialize get exec} def/terminate {	currentdict Adobe_shading_AI8 eq {	 end	} if} def/bdprocs {	{		dup xcheck 1 index type /arraytype eq and {			bind		} if		pop pop	} forall} def/X! {pop} def/X# {pop pop} def/Mesh 40 dict defMesh begin/initialize {	Mesh bdprocs	Mesh begin		/emulate? /AI8MeshEmulation where {			pop AI8MeshEmulation		}{			systemdict /shfill known not		} ifelse def end} def/bd {	shadingdict begin} def/paint {	emulate? {	 end	}{		/_lp /none ddef _fc /_lp /none ddef				/AIColorSpace AIColorSpace tocolorspace store		/ColorSpace AIColorSpace topsspace store				version_ge_3010.106 not systemdict /setsmoothness known and {			0.0001 setsmoothness		} if				composite? {			/DataSource getdatasrc def			Matrix concat			currentdict end			shfill		}{			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {			 end			}{				/ColorSpace /DeviceGray store				/Decode [0 1 0 1 0 1] store				/DataSource getplatesrc def				Matrix concat				currentdict end				shfill			} ifelse		} ifelse	} ifelse} def/shadingdict 12 dict defshadingdict begin	/ShadingType 6 def	/BitsPerCoordinate 16 def	/BitsPerComponent 8 def	/BitsPerFlag 8 defend/datafile null def/databuf 256 string def/dataptr 0 def/srcspace null def/srcchannels 0 def/dstchannels 0 def/dstplate 0 def/srctodstcolor null def/getplatesrc {	/srcspace AIColorSpace store	/srcchannels AIColorSpace getnchannels store	/dstchannels 1 store	/dstplate getplateindex store	/srctodstcolor srcspace makesmarks {		dstplate 4 eq {			{1 exch sub}		}{			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}		} ifelse	}{		{srcchannels {pop} repeat 1}	} ifelse store	/datafile getdatasrc store	/rdpatch168 load DataLength () /SubFileDecode filter} def/getdatasrc {	/rdcmntline load /ASCII85Decode filter} def/rdpatch168 {	/dataptr 0 store	49 rdcount	4 {		dup {pop srcchannels getint8} if		dup {pop srctodstcolor dstchannels putint8 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdpatch3216 {	/dataptr 0 store	97 rdcount	4 {		dup {pop srcchannels getint16} if		dup {pop srctodstcolor dstchannels putint16 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdcount {	dup 0 gt {		datafile databuf dataptr 4 -1 roll getinterval readstring		exch length dataptr add /dataptr exch store	}{		true	} ifelse} def/getint8 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 255 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint8 {	dup dataptr add /dataptr exch store	dataptr exch	{		1 sub exch		255 mul cvi		databuf 2 index		3 -1 roll put	} repeat	pop} def /getint16 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 256 mul datafile read} if		dup {pop add 65535 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint16 {	dup 2 mul dataptr add /dataptr exch store	dataptr exch	{		2 sub exch		65535 mul cvi dup		256 idiv databuf 3 index 3 -1 roll put		256 mod databuf 2 index 1 add 3 -1 roll put	} repeat	pop} def /srcbuf 256 string def/rdcmntline {	currentfile srcbuf readline pop	(%) anchorsearch {pop} if} def/getplateindex {	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall} def/aicsarray 4 array def/aicsaltvals 4 array def/aicsaltcolr aicsaltvals def/tocolorspace {	dup type /arraytype eq {		mark exch aload pop		aicsarray 0 3 -1 roll put		aicsarray 1 3 -1 roll put		dup aicsarray 2 3 -1 roll put		gettintxform aicsarray 3 3 -1 roll put		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store		aicsaltcolr astore pop pop		aicsarray	} if} def/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def/gettintxform {	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load} def/getnchannels {	dup type /arraytype eq {0 get} if	colorspacedict exch get begin Channels end} def/makesmarks {	composite? {		pop true	}{		dup dup type /arraytype eq {0 get} if		colorspacedict exch get begin MarksPlate end	} ifelse} def/markingplate {	composite? {		pop true	}{		dup type /arraytype eq {			dup length getplateindex gt {getplateindex get}{pop false} ifelse		} if	} ifelse} def/tocmyk {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToCMYK end} def/topsspace {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToPSSpace end} def/colorspacedict 5 dict dup begin	/DeviceGray 4 dict dup begin		/Channels 1 def		/MarksPlate {pop black?} def		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def		/ToPSSpace {} def end def	/DeviceRGB 4 dict dup begin		/Channels 3 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop _rgbtocmyk} def		/ToPSSpace {} def end def	/DeviceCMYK 4 dict dup begin		/Channels 4 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop} def		/ToPSSpace {} def end def	/Separation 4 dict dup begin		/Channels 1 def		/MarksPlate {			/findcmykcustomcolor where {				pop dup 1 exch ToCMYK 5 -1 roll 1 get				findcmykcustomcolor 1 setcustomcolor				systemdict /currentgray get exec				1 ne			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {} def end def	/Process 4 dict dup begin		/Channels 1 def		/MarksPlate {			isCMYKSep? {				1 exch ToCMYK 4 array astore getplateindex get 0 ne 			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {			4 array copy dup 0 /Separation put		} def end defend def/isoverprint {	/currentoverprint where {pop currentoverprint}{_of} ifelse} def/version_ge_3010.106 {   version {cvr} stopped {      pop      false   }{      3010.106 ge   } ifelse} defendenddefaultpacking setpacking%%EndResource%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get execAdobe_ColorImage_AI6 /initialize get execAdobe_shading_AI8 /initialize get execAdobe_Illustrator_AI5 /initialize get exec1 Bn%AI5_BeginGradient: (Unnamed gradient)(Unnamed gradient) 1 2 Bd[<FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFBFBFBFBFBFBFBFBFBFBFBFBFBFAFAFAFAFAFAFAFAFAFAFAF9F9F9F9F9F9F9F9F9F9F8F8F8F8F8F8F8F8F8F7F7F7F7F7F7F7F7F7F6F6F6F6F6F6F6F6F5F5F5F5F5F5F5F4F4F4F4F4F4F4F3F3F3F3F3F3F3F2F2F2F2F2F2F1F1F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEEEEEEEEEEEEEDEDEDEDEDECECECECECEBEBEBEBEBEAEAEAEAEAE9E9E9E9E9E8E8E8E8E7E7E7E7E7E6E6E6E6E5E5E5E5E4E4E4E4E4E3E3E3E3E2E2E2E2E1E1E1E1E0E0E0DFDFDFDFDEDEDEDEDDDDDDDDDCDCDCDBDBDBDBDADADAD9D9D9D9D8D8D8D7D7D7D6D6D6D6D5D5D5D4D4D4D3D3D3D2D2D2D1D1D1D0D0D0CFCFCFCECECECDCDCDCCCCCCCBCBCBCACACAC9C9C8C8C8C7C7C7C6C6C6C5C5C4C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B6B6B6B5B5B4B4B3B3B3><CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCACACACACACACACACACACACACACAC9C9C9C9C9C9C9C9C9C9C8C8C8C8C8C8C8C8C8C7C7C7C7C7C7C7C7C6C6C6C6C6C6C6C5C5C5C5C5C5C5C4C4C4C4C4C4C3C3C3C3C3C3C2C2C2C2C2C1C1C1C1C1C0C0C0C0BFBFBFBFBFBEBEBEBEBDBDBDBDBCBCBCBCBBBBBBBBBABABABAB9B9B9B9B8B8B8B7B7B7B7B6B6B6B5B5B5B4B4B4B3B3B3B2B2B2B1B1B1B0B0B0AFAFAFAEAEAEADADACACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A2A2A1A1A1A0A09F9F9E9E9D9D9C9C9B9B9B9A9A999998989797969695959493939292919190908F8F8E8E8D8C8C8B8B8A8A898888878786858584848382828181807F7F7E7D7D7C7C7B7A7A79787877767675747473727271706F6F6E6D6D6C6B6A6A696868676665656463626261605F5F5E5D5C5B5B5A5958575756555453535251504F4F4E4D4C4B4A4949484746454443424241403F3E3D3C3B3A3A393837363534333231302F2E2D2C2B2A29292827262524232221201F1E1D1C1B1A>001 %_Br[1 0.8 0 0 1 75 0 %_BS%_1 0.8 0 0 1 75 0 Bs0.7 0.1 0 0 1 50 100 %_BS%_0.7 0.1 0 0 1 50 100 BsBD%AI5_EndGradient%AI5_Begin_NonPrintingNp2 Bn%AI5_BeginGradient: (Neuer Verl\212ufe 3)(Neuer Verl\212ufe 3) 1 2 Bd[<FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFDFDFDFDFDFDFCFCFCFCFCFCFCFCFCFCFCFBFBFBFBFBFBFBFBFAFAFAFAFAFAFAFAF9F9F9F9F9F9F9F8F8F8F8F8F8F7F7F7F7F7F7F6F6F6F6F6F6F5F5F5F5F5F4F4F4F4F4F3F3F3F3F2F2F2F2F2F1F1F1F1F0F0F0F0EFEFEFEFEEEEEEEEEDEDEDECECECECEBEBEBEAEAEAEAE9E9E9E8E8E8E7E7E7E6E6E6E5E5E5E4E4E4E3E3E3E2E2E1E1E1E0E0E0DFDFDEDEDEDDDDDCDCDCDBDBDADADAD9D9D8D8D7D7D7D6D6D5D5D4D4D3D3D3D2D2D1D1D0D0CFCFCECECDCDCCCCCBCBCACAC9C9C8C8C7C6C6C5C5C4C4C3C3C2C2C1C0C0BFBFBEBEBDBCBCBBBBBAB9B9B8B8B7B6B6B5B4B4B3B3B2B1B1B0AFAFAEADADACABABAAA9A9A8A7A6A6A5A4A4A3A2A2A1A09F9F9E9D9C9C9B9A999998979696959493929291908F8F8E8D8C8B8A8A8988878686858483828180807F7E7D><9999999999999999999999999999999999999999999999999999999999999999999998989898989898989898989898989898989898979797979797979797979797979696969696969696969595959595959595959494949494949493939393939392929292929291919191919190909090908F8F8F8F8F8E8E8E8E8D8D8D8D8C8C8C8C8C8B8B8B8B8A8A8A89898989888888878787878686868585858484848383838382828181818080807F7F7F7E7E7E7D7D7C7C7C7B7B7A7A7A797978787877777676757575747473737272717170706F6F6E6E6E6D6D6C6C6B6A6A696968686767666665656464636262616160605F5E5E5D5D5C5B5B5A5A5958585757565555545353525151504F4F4E4D4D4C4B4B4A49494847464645444343424141403F3E3E3D3C3B3A3A3938373736353433333231302F2E2E2D2C2B2A2928282726252423222221201F1E1D1C1B1A19181717161514131211100F0E0D0C0B0A09080706050403020100>001 %_Br[1 0.6 0 0 1 75 0 %_BS%_1 0.6 0 0 1 75 0 Bs0.49 0 0 0 1 50 100 %_BS%_0.49 0 0 0 1 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Neuer Verl\212ufe 3\012  1)(Neuer Verl\212ufe 3\012  1) 1 2 Bd[<FFFFFFFFFFFFFFFFFFFFFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFAFAFAFAF9F9F9F9F8F8F8F8F7F7F7F7F6F6F6F5F5F5F4F4F4F4F3F3F3F2F2F2F1F1F1F0F0F0EFEFEEEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E6E6E6E5E5E4E4E3E3E2E2E2E1E1E0E0DFDFDEDEDDDDDCDCDBDBDADAD9D9D8D8D7D7D6D6D5D4D4D3D3D2D2D1D1D0CFCFCECECDCDCCCBCBCACAC9C9C8C7C7C6C6C5C4C4C3C2C2C1C1C0BFBFBEBDBDBCBBBBBAB9B9B8B7B7B6B5B5B4B3B3B2B1B1B0AFAFAEADACACABAAAAA9A8A7A7A6A5A5A4A3A2A2A1A09F9F9E9D9C9C9B9A999998979695959493929191908F8E8D8D8C8B8A8989888786858584838281807F7F7E7D><99999999999999999998989898989898989797979797979696969696959595959494949493939393929292929191919090908F8F8F8E8E8E8D8D8D8C8C8C8B8B8A8A8A89898888888787868686858584848383828281818180807F7F7E7E7D7D7C7C7B7B7A7A7978787777767675757474737272717170706F6E6E6D6D6C6B6B6A696968686766666564646362626160605F5E5E5D5C5C5B5A5A59585757565555545352525150504F4E4D4D4C4B4A494948474646454443424241403F3E3E3D3C3B3A3A39383736353534333231302F2F2E2D2C2B2A2928282726252423222120201F1E1D1C1B1A19181716151413131211100F0E0D0C0B0A09080706050403020100>0<1F1F1F1F1F1F1F1F1F1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1C1C1C1C1C1C1C1C1C1C1C1C1C1C1B1B1B1B1B1B1B1B1B1B1B1B1A1A1A1A1A1A1A1A1A1A1A19191919191919191919181818181818181818171717171717171717161616161616161615151515151515151414141414141414131313131313131212121212121211111111111111101010101010100F0F0F0F0F0F0F0E0E0E0E0E0E0D0D0D0D0D0D0C0C0C0C0C0C0C0B0B0B0B0B0B0A0A0A0A0A09090909090908080808080807070707070606060606060505050505040404040404030303030302020202020101010101000000>1 %_Br[1 0.6 0 0.12 1 66.2921 0 %_BS%_1 0.6 0 0.12 1 66.2921 0 Bs0.49 0 0 0 1 50 100 %_BS%_0.49 0 0 0 1 50 100 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Passermarken]) 0 Xs([Passermarken]) Pc1 1 0 0 (1) 0 x(1) PcBb0 0 0 0 Bh2 (Neuer Verl\212ufe 3\012  1) -7894.5 8612 0 0 1 0 0 1 0 0 Bg0 BB(Neuer Verl\212ufe 3\012  1) Pc1 0.23 0 0.18 (PANTONE 3015 CVU) 0 x(PANTONE 3015 CVU) Pc0.72 0 0 0 (PANTONE 2985 CVU) 0 x(PANTONE 2985 CVU) Pc1 0.43 0 0 (PANTONE 300 CVU) 0 x(PANTONE 300 CVU) Pc0.76 0.09 0 0 (PANTONE 298 CVU) 0 x(PANTONE 298 CVU) Pc1 0.56 0 0 (PANTONE 293 CVU) 0 x(PANTONE 293 CVU) Pc0.47 0.11 0 0 (PANTONE 291 CVU) 0 x(PANTONE 291 CVU) PcBb0 0 0 0 Bh2 (Neuer Verl\212ufe 3) -7894.5 8612 0 0 1 0 0 1 0 0 Bg0 BB(Neuer Verl\212ufe 3) PcPB%AI5_EndPalette%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Angleichungen-Zusatzmodul) (Angleichungen)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Musterpinsel-Zusatzmodul) (Bildpinsel-Werkzeug)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Bildpinsel-Zusatzmodul) (Bildpinsel-Werkzeug)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (R\237ckg\212ngig: Neuer Kalligraphiepinsel) (Kalligraphiepinsel-Werkzeug)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Spezialpinsel-Zusatzmodul) (Spezialpinsel-Werkzeug)%AI5_End_NonPrinting--%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Ebene 1) Ln0 A0 O800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:1 D0 XR538.293 535.8203 m538.1055 526.2607 l537.542 516.7168 l536.6055 507.2031 l535.2949 497.7324 l533.6143 488.3213 l531.5664 478.9824 l529.1523 469.7314 l526.376 460.583 l523.2441 451.5498 l519.7598 442.6475 l515.9277 433.8877 l511.7559 425.2861 l507.249 416.8535 l502.415 408.6064 l497.2598 400.5537 l491.7598 392.6621 l484.0361 382.5957 l475.7568 372.9033 l466.9834 363.6572 l457.7373 354.8818 l448.0439 346.6035 l437.9775 338.8799 l430.0859 333.3799 l422.0342 328.2246 l413.7861 323.3906 l405.3535 318.8838 l396.752 314.7119 l387.9932 310.8799 l379.0898 307.3965 l370.0566 304.2637 l360.9082 301.4883 l351.6572 299.0742 l342.3193 297.0254 l332.9072 295.3447 l323.4375 294.0352 l313.9229 293.0977 l304.3789 292.5352 l294.8203 292.3467 l285.2607 292.5352 l275.7168 293.0977 l266.2031 294.0352 l256.7324 295.3447 l247.3203 297.0254 l237.9824 299.0742 l228.7324 301.4883 l219.583 304.2637 l210.5498 307.3965 l201.6465 310.8799 l192.8887 314.7119 l184.2852 318.8838 l175.8535 323.3906 l167.6055 328.2246 l159.5527 333.3799 l151.6621 338.8799 l141.5957 346.6035 l131.9023 354.8818 l122.6572 363.6572 l113.8818 372.9033 l105.6035 382.5957 l97.8799 392.6621 l92.3799 400.5527 l87.2246 408.6064 l82.3906 416.8535 l77.8838 425.2852 l73.7119 433.8877 l69.8799 442.6475 l66.3965 451.5498 l63.2637 460.583 l60.4883 469.7324 l58.0742 478.9824 l56.0254 488.3213 l54.3457 497.7334 l53.0352 507.2031 l52.0977 516.7168 l51.5352 526.2607 l51.3477 535.8203 l51.5352 545.3789 l52.0977 554.9229 l53.0352 564.4375 l54.3457 573.9072 l56.0254 583.3193 l58.0742 592.6572 l60.4883 601.9082 l63.2637 611.0566 l66.3965 620.0898 l69.8799 628.9932 l73.7119 637.752 l77.8838 646.3535 l82.3906 654.7861 l87.2246 663.0342 l92.3799 671.0859 l97.8799 678.9775 l105.6035 689.0439 l113.8818 698.7368 l122.6572 707.9829 l131.9023 716.7568 l141.5957 725.0361 l151.6621 732.7598 l159.5547 738.2598 l167.6055 743.415 l175.8535 748.249 l184.2861 752.7559 l192.8887 756.9282 l201.6465 760.7598 l210.5498 764.2441 l219.583 767.376 l228.7305 770.1519 l237.9824 772.5659 l247.3203 774.6143 l256.7324 776.2949 l266.2031 777.605 l275.7168 778.542 l285.2607 779.105 l294.8203 779.293 l304.3789 779.105 l313.9229 778.542 l323.4375 777.605 l332.9072 776.2949 l342.3193 774.6143 l351.6582 772.5659 l360.9082 770.1519 l370.0566 767.376 l379.0898 764.2441 l387.9932 760.7598 l396.752 756.9282 l405.3535 752.7559 l413.7861 748.249 l422.0342 743.415 l430.0859 738.2598 l437.9775 732.7598 l448.0439 725.0361 l457.7373 716.7568 l466.9834 707.9829 l475.7568 698.7368 l484.0361 689.0439 l491.7598 678.9775 l497.2598 671.0859 l502.415 663.0342 l507.249 654.7861 l511.7559 646.3535 l515.9277 637.752 l519.7598 628.9932 l523.2441 620.0898 l526.376 611.0566 l529.1523 601.9082 l531.5664 592.6582 l533.6143 583.3193 l535.2949 573.9072 l536.6055 564.4375 l537.542 554.9229 l538.1055 545.3789 l538.293 535.8203 lBb0 0 0 0 Bh1 (Unnamed gradient) 292.8203 441.8198 0 243.4729 1 0 0 1 2 -94 Bg243.4729 0 0 -243.4729 294.8203 535.8198 Bmf0 BBu*u0 0 0 1 k0 D175.0825 108 m168.9624 108 L168.9624 165.1211 L162.0264 165.1211 L162.0264 170.833 L168.9624 170.833 L168.9624 198.9854 L168.9624 203.6094 169.0981 210.2734 171.4102 214.3535 c174.2666 219.3857 179.7065 221.9697 185.4185 221.9697 c187.3228 221.9697 189.0908 221.6973 190.8584 221.0176 c190.8584 215.4414 L189.2266 215.7129 187.5947 216.2568 185.8267 216.2568 c175.2183 216.2568 175.0825 205.6494 175.0825 197.7607 c175.0825 170.833 L190.8584 170.833 L190.8584 165.1211 L175.0825 165.1211 L175.0825 108 lf*U*u202.0791 108 m195.959 108 L195.959 170.833 L202.0791 170.833 L202.0791 108 lf204.6631 191.7773 m204.6631 188.6494 202.2153 186.2012 199.0874 186.2012 c195.959 186.2012 193.5112 188.6494 193.5112 191.7773 c193.5112 194.7686 195.959 197.3535 199.0874 197.3535 c202.2153 197.3535 204.6631 194.7686 204.6631 191.7773 cf*U*u222.1509 108.4951 m216.0308 108.4951 L216.0308 220.6963 L222.1509 220.6963 L222.1509 108.4951 lf*U*u259.4204 145.1055 m259.4204 138.9854 L233.5801 138.9854 L233.5801 145.1055 L259.4204 145.1055 lf*U*u302.7979 166.4805 m318.166 166.4805 327.5508 153.1523 327.5508 138.7363 c327.5508 124.7285 317.7588 112.3516 303.0703 112.3516 c287.9741 112.3516 278.0459 123.3682 278.0459 138.0566 c278.0459 153.1523 286.75 166.4805 302.7979 166.4805 cf278.4541 170.833 m272.334 170.833 L272.334 71.2793 L278.4541 71.2793 L278.4541 118.8799 L278.7261 118.8799 l283.894 110.8564 293.2783 106.6396 302.9346 106.6396 c321.8389 106.6396 333.6709 120.5117 333.6709 138.8721 c333.6709 157.2324 321.8389 172.1924 302.6621 172.1924 c293.4141 172.1924 283.3501 167.5684 278.7261 159.5449 C278.4541 159.5449 l278.4541 170.833 Lf*U*u349.6309 108 m343.5107 108 L343.5107 220.2012 L349.6309 220.2012 L349.6309 108 lf*U*u408.3057 170.833 m408.3057 133.1602 L408.3057 126.7686 408.4414 120.376 404.4971 115.0723 c400.1455 109.3604 392.8008 106.6396 385.7285 106.6396 c378.6572 106.6396 371.3125 109.3604 366.9609 115.0723 c363.0166 120.376 363.1523 126.7686 363.1523 133.1602 c363.1523 170.833 L369.2725 170.833 L369.2725 135.3359 L369.2725 123.2324 370.6328 112.3516 385.7285 112.3516 c400.8252 112.3516 402.1855 123.2324 402.1855 135.3359 c402.1855 170.833 L408.3057 170.833 lf*U*u447.7148 159.4082 m445.6758 163.7607 441.5957 166.4805 436.6992 166.4805 c431.3955 166.4805 425.9551 162.1289 425.9551 156.6885 c425.9551 141.5928 456.5557 148.9365 456.5557 126.2246 c456.5557 114.6641 447.5791 106.6396 436.291 106.6396 c425.8193 106.6396 417.251 113.0322 414.667 123.2324 c420.6514 125.1357 L422.9629 117.6563 427.9951 112.3516 436.291 112.3516 c444.1797 112.3516 450.4355 118.6084 450.4355 126.4961 c450.4355 134.248 444.4512 136.6963 438.1953 138.8721 c429.627 142 419.835 145.6729 419.835 156.2803 c419.835 165.8008 427.8594 172.1924 436.9707 172.1924 c443.3633 172.1924 450.2998 167.9766 453.0195 162.1289 C447.7148 159.4082 lf*U*u171.8491 79.6641 m178.1206 65.1758 L184.4146 79.6641 L187.9175 61.4219 L185.9487 61.4219 L183.729 73.0947 L183.6831 73.0947 L178.1206 60.7119 L172.5815 73.0947 L172.5356 73.0947 L170.3159 61.4219 L168.3472 61.4219 L171.8491 79.6641 lf*U*u204.7075 77.6309 m208.6665 77.6309 211.7798 74.4033 211.7798 70.4893 c211.7798 66.5977 208.6206 63.3477 204.7075 63.3477 c200.7925 63.3477 197.6343 66.5977 197.6343 70.4893 c197.6343 74.4033 200.7466 77.6309 204.7075 77.6309 cf204.7075 79.416 m199.7856 79.416 195.7114 75.4092 195.7114 70.4658 c195.7114 65.499 199.7856 61.5625 204.7075 61.5625 c209.6284 61.5625 213.7017 65.499 213.7017 70.4658 c213.7017 75.4092 209.6284 79.416 204.7075 79.416 cf*U*u224.9097 62.9961 m224.9097 76.6846 L226.3052 76.6846 l228.3423 76.6846 230.0825 76.4092 231.6616 75.0137 c233.1489 73.708 233.9038 71.8086 233.9038 69.8408 c233.9038 67.918 233.1724 66.1094 231.7524 64.7813 c230.1733 63.2939 228.4116 62.9961 226.3052 62.9961 c224.9097 62.9961 Lf222.9858 61.2119 m226.1899 61.2119 l228.8921 61.2119 230.9517 61.5547 233.0112 63.3857 c234.9116 65.0791 235.8276 67.2998 235.8276 69.8164 c235.8276 72.3818 234.9341 74.6924 232.9653 76.3867 c230.9292 78.126 228.8228 78.4697 226.2358 78.4697 C222.9858 78.4697 l222.9858 61.2119 Lf*U*u244.8647 78.9072 m253.8149 78.9072 L253.8149 77.1221 L246.7886 77.1221 L246.7886 71.9951 L253.6079 71.9951 L253.6079 70.209 L246.7886 70.209 L246.7886 63.4346 L253.8149 63.4346 L253.8149 61.6494 L244.8647 61.6494 L244.8647 78.9072 lf*U*u312.4688 71.9531 m312.4688 78.957 L314.3926 78.957 L314.3926 61.6992 L312.4688 61.6992 L312.4688 70.168 L303.6348 70.168 L303.6348 61.6992 L301.7129 61.6992 L301.7129 78.957 L303.6348 78.957 L303.6348 71.9531 L312.4688 71.9531 lf*U*u333.9287 68.3848 m328.0908 68.3848 L331.0439 75.2979 l333.9287 68.3848 Lf334.6826 66.5996 m336.7217 61.7012 L338.8486 61.7012 L331.0889 79.7832 L323.124 61.7012 L325.2295 61.7012 L327.3115 66.5996 l334.6826 66.5996 Lf*U*u348.0508 68.9082 m348.0508 67.626 348.0039 66.1611 348.8066 65.0625 c349.5605 64.0098 351.0273 63.4141 352.2852 63.4141 c353.5215 63.4141 354.8711 63.9873 355.6719 64.9482 c356.5879 66.0469 356.5195 67.5586 356.5195 68.9082 c356.5195 79.1855 L358.4414 79.1855 L358.4414 68.3818 L358.4414 66.5049 358.3047 65.0176 356.9316 63.5986 c355.7422 62.3154 354.0254 61.6289 352.2852 61.6289 c350.6602 61.6289 348.9883 62.2471 347.8223 63.3926 c346.3105 64.834 346.1289 66.4131 346.1289 68.3818 c346.1289 79.1855 L348.0508 79.1855 L348.0508 68.9082 lf*U*u373.626 61.499 m371.7021 61.499 L371.7021 76.9717 L367.5361 76.9717 L367.5361 78.7568 L377.8369 78.7568 L377.8369 76.9717 L373.626 76.9717 L373.626 61.499 lf*U*u386.4551 79.2871 m399.916 65.1875 L399.916 78.5547 L401.8379 78.5547 L401.8379 60.5176 L388.3789 74.5947 L388.3789 61.2959 L386.4551 61.2959 L386.4551 79.2871 lf*U*u421.6152 68.3838 m415.7773 68.3838 L418.7324 75.2969 l421.6152 68.3838 Lf422.3711 66.5986 m424.4063 61.7002 L426.5352 61.7002 L418.7754 79.7822 L410.8125 61.7002 L412.918 61.7002 L415 66.5986 l422.3711 66.5986 Lf*U*u446.2305 71.542 m446.2305 78.5469 L448.1543 78.5469 L448.1543 61.2891 L446.2305 61.2891 L446.2305 69.7568 L437.3965 69.7568 L437.3965 61.2891 L435.4727 61.2891 L435.4727 78.5469 L437.3965 78.5469 L437.3965 71.542 L446.2305 71.542 lf*U1 Ap278.4526 61.4424 m272.3398 61.4424 L272.3398 71.5596 L278.4526 71.5596 L278.4526 61.4424 LfUu0 Ap0 0 0 0 k308.0117 605.4263 m307.3955 605.5356 306.7656 605.563 306.1416 605.5083 c305.1504 605.4224 304.1777 605.1274 303.3066 604.647 c302.7627 604.3403 302.3027 603.8882 301.9854 603.3501 c301.7354 602.9263 301.5742 602.4507 301.5166 601.9624 c301.4424 600.7515 301.5605 599.5288 301.8623 598.353 c302.6133 594.4272 l303.0205 592.5444 303.1768 590.6069 303.0762 588.6821 c303.0469 586.4595 l303.0352 585.4419 303.1426 584.4224 303.3633 583.4282 c303.5215 582.6567 303.8867 581.9272 304.4102 581.3374 c304.6719 581.0425 304.9717 580.7827 305.3008 580.564 c305.7539 580.2651 306.2637 580.0483 306.793 579.9282 c307.0615 579.8765 307.3359 579.8589 307.6084 579.8774 c307.8936 579.896 308.1758 579.9556 308.4443 580.0503 c309.3789 580.4058 310.2188 581.0093 310.8506 581.7837 c311.1719 582.1782 311.4424 582.6167 311.6494 583.0825 c313.1895 587.0396 313.8076 591.3511 313.4395 595.5825 c313.4375 598.0396 312.8496 600.4937 311.7354 602.6831 c311.6787 602.77 l311.1064 603.6724 310.2949 604.4204 309.3486 604.9155 c308.9258 605.1372 308.4756 605.3091 308.0117 605.4263 cf310.8398 621.5063 m309.9473 621.9097 308.9707 622.1265 307.9902 622.1392 c307.5576 622.1411 307.125 622.0425 306.7354 621.8521 c305.6563 621.3228 304.6152 620.7134 303.623 620.0347 c303.1289 619.7095 302.7236 619.2524 302.459 618.7241 c302.2148 618.2407 302.0898 617.6968 302.0986 617.1548 c302.0527 615.6284 302.2168 614.0962 302.584 612.6147 c302.7598 611.9136 303.123 611.2593 303.625 610.7397 c303.877 610.479 304.1621 610.2524 304.4727 610.0669 c304.9512 609.7798 305.4883 609.5903 306.041 609.5142 c307.2012 609.3081 308.416 609.4136 309.5234 609.8159 c310.6309 610.2163 311.6309 610.9146 312.3887 611.8169 c313.1475 612.7183 313.6641 613.8218 313.8691 614.9819 c313.9727 615.562 314 616.1567 313.9482 616.7437 c313.8711 617.6499 313.6074 618.5386 313.1797 619.3413 c312.8906 619.8032 l312.6367 620.1655 312.334 620.4946 311.9941 620.7798 c311.6445 621.0718 311.2559 621.3179 310.8398 621.5063 cf304.1563 474.8862 m304.043 474.145 l303.9609 473.396 l303.9102 472.644 l303.8936 471.8901 l303.9082 471.1362 l303.957 470.3833 l304.6738 463.7183 l305.6885 457.0835 l305.8965 455.7368 l306.0508 454.3735 l306.1484 453.0054 l306.1904 451.6333 l305.9238 434.4663 l305.2295 423.3633 l304.3047 415.5293 l304.123 413.9941 l304.0039 412.459 l303.9668 411.2949 l303.9893 410.1348 l304.1074 409.1836 l304.373 408.2676 l304.7363 407.5137 l305.2246 406.8398 l306.1143 406.1641 l306.8867 405.873 l307.627 405.8359 l308.375 406.0039 l309.0947 406.3496 l309.7461 406.8613 l310.4883 407.6602 l311.1523 408.5313 l311.7676 409.5176 l312.291 410.5566 l312.8574 411.8828 l313.3789 413.2305 l313.8516 414.5957 l314.2373 415.8555 l314.5762 417.1309 l314.8643 418.418 l315.3379 420.916 l315.7422 423.4238 l316.5039 429.6367 l317.7441 449.9966 l317.8594 462.7153 l317.8018 471.3345 l317.7559 472.0659 l317.6826 472.7974 l317.582 473.5269 l317.4531 474.2495 l317.2295 475.2466 l316.959 476.229 l316.6396 477.1987 l316.4385 477.7202 l315.9648 478.731 l315.5527 479.4038 l315.3164 479.7144 l314.7441 480.2964 l314.0742 480.7593 l313.3984 481.0513 l312.6738 481.1997 l311.748 481.2271 l310.8232 481.1284 l309.9199 480.9038 l309.0635 480.5659 l308.2578 480.1372 l307.5039 479.6255 l306.8096 479.0366 l306.4854 478.7134 l305.7217 477.8364 l305.0371 476.895 l304.5313 476.0464 l304.2461 475.2876 l304.1563 474.8862 lf323.7578 580.0679 m324.541 580.4722 325.2725 580.9819 325.9258 581.5757 c326.9707 582.5278 327.8125 583.7007 328.3809 584.9956 c329.1475 587.1284 329.6152 589.3687 329.7666 591.6294 c330.6748 600.3569 l331.3652 612.8306 l331.5898 616.0122 331.6035 619.2095 331.4072 622.3931 c330.9961 626.5435 330.1748 630.6538 328.957 634.6421 c328.2764 636.3687 327.1338 637.9106 325.6807 639.0659 c325.1563 639.4819 324.5928 639.8481 323.998 640.1597 c323.7031 640.3228 l322.9668 640.6245 322.1494 640.729 321.3604 640.6226 c320.9883 640.5728 320.6221 640.4751 320.2744 640.3364 c319.5137 640.1021 318.7744 639.7993 318.0674 639.4341 c317.7539 639.2593 317.4893 639.0015 317.3066 638.6938 c317.2168 638.5435 317.1465 638.3823 317.0986 638.2153 c316.4961 635.8687 316.3174 633.4126 316.5762 631.0034 c317.6982 624.5142 l318.25 621.2505 318.5879 617.9497 318.707 614.6411 c319.0332 599.5161 l319.0469 591.7173 l319.0986 589.771 319.0605 587.8218 318.9326 585.8784 c318.8516 584.9966 318.834 584.1099 318.877 583.2241 c318.8652 582.6313 319.0137 582.0356 319.3008 581.5151 c319.4141 581.3091 319.5488 581.1167 319.7012 580.938 c320.0479 580.5884 320.4531 580.2983 320.8965 580.0835 c321.0146 580.0298 l321.5928 579.7983 322.2324 579.7222 322.8496 579.811 c323.1611 579.8569 323.4678 579.9429 323.7578 580.0679 cf334.4717 424.9199 m333.7803 426.166 l333.6582 426.4648 l333.4541 427.3594 l333.3779 428.2578 l333.3838 429.5352 l333.4434 430.8086 l333.5547 432.0708 l333.6602 433.2622 l333.7158 434.4507 l333.7559 439.8354 l333.7842 445.436 l333.8135 448.1333 l333.7969 448.8921 l333.7568 449.6509 l333.6719 450.4224 l333.5234 451.1831 l333.3662 451.7808 l333.1836 452.3696 l332.9727 452.9507 l332.6523 453.6831 l332.2754 454.3872 l331.7061 455.2446 l331.3887 455.646 l330.7969 456.2661 l330.1328 456.7993 l329.3789 457.2095 l328.9727 457.3462 l328.1768 457.4868 l327.2568 457.479 l326.6934 457.4116 l326.1318 457.3169 l325.5811 457.1948 l324.7188 456.8599 l324.1396 456.4253 l323.6504 455.8677 l323.4316 455.561 l322.9434 454.7485 l322.5391 453.8911 l322.291 453.1694 l322.1338 452.4214 l322.0439 451.7241 l321.9834 451.0249 l321.9502 450.3208 l321.9395 448.5786 l321.9932 446.8286 l322.166 437.7573 l322.166 428.1211 l322.2422 426.3809 l322.4033 424.6504 l322.6563 422.877 l322.9951 421.1172 l323.2002 420.2754 l323.4463 419.4434 l323.7324 418.625 l324.0596 417.8223 l324.5049 416.9316 l325.0449 416.0957 l325.3447 415.7031 l325.8975 415.1328 l326.584 414.6445 l327.3916 414.25 l328.3271 413.9277 l329.3545 413.6621 l330.1201 413.5059 l330.8916 413.3711 l331.9609 413.2383 l332.8623 413.2129 l333.7598 413.2969 l334.666 413.4922 l335.5449 413.7891 l336.3213 414.166 l337.0557 414.6523 l337.7422 415.248 l338.5332 415.9336 l338.9189 416.041 l339.582 415.3105 l340.0254 414.4492 l340.5215 413.5645 l341.1377 412.7715 l341.8643 412.0801 l342.6875 411.5059 l343.5869 411.0605 l344.5381 410.7559 l345.4521 410.6504 l346.3594 410.7656 l347.2148 411.0918 l347.9668 411.6152 l348.5723 412.3008 l348.918 412.9336 l349.1221 413.6309 l349.2061 414.1641 l349.2656 414.707 l349.2988 415.25 l349.3066 415.7969 l349.2871 416.3418 l348.7393 423.1504 l348.1611 433.4683 l348.0459 441.0063 l347.9961 442.2544 l347.8887 443.4946 l347.7266 444.6909 l347.5059 445.8765 l347.2656 446.7827 l346.9385 447.6577 l346.4922 448.4897 l346.2207 448.8696 l345.585 449.5005 l344.873 449.9312 l344.1553 450.2056 l343.7803 450.2964 l342.8828 450.4058 l341.9326 450.3931 l341.0908 450.2837 l340.3701 450.0806 l339.5908 449.731 l338.8701 449.2729 l338.2236 448.7144 l337.6387 448.0415 l337.1543 447.2935 l336.7783 446.4839 l336.4893 445.6138 l336.2793 444.7192 l336.1494 443.8101 l336.1016 442.8921 l336.1357 441.9907 l336.252 441.0952 l336.4473 440.2144 l336.7236 439.3501 l338.5439 434.438 l338.8135 433.4243 l338.8887 432.3687 l338.7646 431.3945 l338.4463 430.4766 l337.2002 427.8086 l336.2617 425.8535 l336.1221 425.6543 l335.2568 425.1914 l334.4717 424.9199 lf371.3516 420.2715 m370.4482 419.707 l369.2861 419.668 l368.6982 419.7539 l367.1855 420.1953 l366.6279 420.4238 l365.5723 420.9434 l364.5869 421.5059 l363.6191 422.0918 l362.8789 422.5723 l362.1553 423.0762 l360.3955 424.3438 l359.6016 424.8516 l358.75 425.2676 l357.8486 425.5918 l356.8965 425.8008 l355.9932 425.8652 l355.1621 425.7852 l354.2822 425.5195 l353.5459 425.0938 l352.9873 424.5332 l352.5459 423.8555 l352.2051 423.1152 l351.9551 422.2461 l351.7998 421.2637 l351.7676 420.2676 l351.8301 419.4258 l351.9697 418.5957 l352.1807 417.9199 l352.3311 417.6016 l352.7803 416.8887 l353.332 416.25 l354.3613 415.3105 l354.9082 414.8789 l355.4756 414.4727 l356.3281 413.916 l357.2051 413.4004 l358.1064 412.9238 l358.6934 412.6445 l359.291 412.3887 l359.8994 412.1582 l360.5166 411.9512 l361.4326 411.6797 l362.3584 411.4453 l363.293 411.2422 l365.0957 410.9297 l366.9111 410.6953 l367.8223 410.6152 l368.7354 410.5742 l369.4941 410.5742 l370.2529 410.6094 l370.9336 410.6758 l371.6113 410.7754 l372.2832 410.9063 l372.9482 411.0703 l373.6045 411.2656 l374.25 411.4941 l374.8838 411.7539 l375.5049 412.043 l376.1104 412.3633 l376.6992 412.7109 l377.2715 413.0879 l377.8232 413.4922 l378.3564 413.9238 l379.3555 414.8594 l380.1631 415.7754 l380.7881 416.6465 l381.3232 417.5762 l381.7646 418.5547 l382.1064 419.5723 l382.3467 420.6172 l382.4814 421.6797 l382.5098 422.2168 l382.5117 422.752 l382.4355 423.8223 l382.3574 424.3516 l382.1748 425.127 l381.8984 425.873 l381.4961 426.6621 l381.0098 427.4023 l380.5195 428.0332 l380.0039 428.6426 l379.4619 429.2324 l378.8477 429.8477 l378.2109 430.4375 l377.5508 431.002 l374.0947 433.7085 l371.1719 435.937 l368.6982 438.0903 l368.0361 438.7573 l367.4111 439.4526 l366.8291 440.1938 l366.5645 440.5815 l366.1807 441.187 l365.8145 441.8042 l364.9854 443.3296 l364.5996 444.1733 l364.293 445.0483 l364.0938 446.103 l364.1738 446.7095 l364.6523 447.5913 l365.4551 448.1274 l366.3701 448.1626 l367.2246 447.8286 l368.1182 447.1763 l369.0889 446.2983 l369.5332 445.8325 l370.2031 445.187 l370.9375 444.644 l371.5801 444.3452 l371.9258 444.2671 l372.8027 444.2368 l373.6631 444.4136 l374.457 444.7905 l375.1514 445.3462 l375.7344 446.0288 l376.1855 446.8052 l376.4893 447.6509 l376.584 448.0913 l376.6602 449.0835 l376.582 450.0229 l376.4033 450.896 l376.2773 451.3267 l376.0664 451.9204 l375.8936 452.314 l375.4707 453.0396 l374.9414 453.7056 l374.3154 454.3003 l373.5674 454.8853 l372.791 455.4331 l371.9873 455.9429 l371.0156 456.4966 l370.0205 457.0093 l369.0049 457.479 l368.2969 457.7729 l367.5811 458.0444 l366.7295 458.2954 l365.9277 458.438 l365.0469 458.5034 l364.0947 458.4888 l363.0762 458.3784 l362.1074 458.1821 l361.1943 457.9028 l360.4297 457.5903 l359.6943 457.2153 l359.1328 456.8823 l358.5879 456.522 l358.0605 456.1382 l357.5 455.6841 l356.9639 455.2026 l356.1514 454.3618 l355.5977 453.6577 l355.3467 453.2866 l354.8916 452.5044 l354.5137 451.6841 l354.2314 450.939 l353.9863 450.1821 l353.7773 449.4146 l353.5977 448.605 l353.4521 447.7896 l353.3438 446.9673 l353.2822 446.2407 l353.2578 445.5112 l353.2686 444.7827 l353.3066 444.1577 l353.3682 443.5347 l353.457 442.9146 l353.5693 442.2993 l353.7744 441.4106 l354.0225 440.5337 l354.3145 439.6685 l354.7051 438.6626 l355.1367 437.6714 l355.6074 436.6997 l356.123 435.7358 l356.6777 434.7935 l357.2686 433.8755 l358.2549 432.4858 l359.3115 431.1504 l360.4355 429.8711 l361.1172 429.1973 l361.8574 428.5898 l362.6523 428.0469 l370.0537 423.4785 l370.6777 422.9199 l371.1699 422.166 l371.5186 421.2617 l371.3516 420.2715 lf*u130.8174 500.6284 m169.4556 504.2397 l206.0176 506.4067 l221.9961 507.0103 l240.4766 507.5591 l258.9512 508.0366 l277.4238 508.4839 l277.5137 497.3618 l277.5879 486.2407 l277.627 475.0825 l277.6553 437.5229 l277.9727 421.9336 l278.3486 410.9941 l279.3105 369.6328 l279.7686 364.1152 l280.2109 354.3281 l281.834 345.9434 l283.0645 341.3203 l286.2109 336.9434 l289.6289 335.2461 l292.5566 336.2051 l294.498 338.6387 l295.2129 342.0566 l295.2129 347.1465 l295.2129 353.7129 l294.7441 360.0566 l294.2334 369.9883 l293.5352 396.2891 l292.832 416.2773 l292.3203 437.1196 l292.0938 449.1577 l291.916 467.98 l291.8467 485.3911 l291.8584 493.4136 l291.9385 508.3677 l305.5547 508.1108 l319.1699 507.7954 l328.9268 507.436 l437.1543 502.189 l437.5342 502.1782 l437.9131 502.1812 l440.4463 502.2769 l442.25 502.4028 l444.0459 502.606 l445.8311 502.8872 l447.5977 503.2437 l449.3477 503.6753 l451.0762 504.1812 l452.3809 504.6284 l453.6602 505.1372 l454.915 505.7065 l456.1416 506.3345 l456.8877 506.7642 l457.6113 507.229 l458.3115 507.729 l458.9863 508.2632 l459.6348 508.8296 l460.0732 509.2515 l460.4912 509.6948 l460.8887 510.1558 l461.2637 510.6353 l461.6152 511.1323 l461.9443 511.645 l462.373 512.3911 l462.7666 513.1577 l463.1221 513.9419 l463.4404 514.7417 l463.7207 515.5562 l463.9727 516.4194 l464.1855 517.2925 l464.3604 518.1743 l464.4951 519.063 l464.5918 519.9575 l464.6475 520.854 l464.6631 521.7671 l464.6396 522.6802 l464.5762 523.5913 l464.4727 524.4985 l464.3291 525.4009 l464.1475 526.2954 l463.8584 527.436 l463.5156 528.563 l463.1172 529.6714 l462.666 530.7593 l462.1738 531.7993 l461.6299 532.813 l461.0361 533.7983 l460.3945 534.7534 l459.2021 536.3608 l457.9443 537.9155 l456.6201 539.4155 l455.2344 540.8589 l453.8799 542.1499 l452.4668 543.3784 l451 544.5415 l449.4814 545.6372 l446.2354 547.772 l442.9043 549.7729 l439.4941 551.6353 l435.5967 553.5728 l431.6299 555.3647 l427.5996 557.0112 l419.377 559.9712 l411.0205 562.5337 l401.1426 565.0864 l391.168 567.23 l371.6377 570.3638 l351.6162 572.3911 l344.3193 572.7837 l337.0137 572.9839 l318.7354 572.8608 l309.916 572.5405 l292.291 571.6763 l292.3984 582.5405 l292.5244 593.4048 l292.6953 604.269 l292.9492 615.4282 l293.2813 626.5864 l293.6855 637.5571 l294.168 648.5259 l295.1172 665.146 l296.2461 679.7612 l296.9082 686.1567 l297.7598 692.5283 l298.5391 697.1045 l299.5078 701.6436 l300.375 705.0605 l301.3584 708.4463 l302.5859 712.2095 l303.9258 715.9336 l304.9805 718.6025 l306.1172 721.2383 l306.9736 723.0376 l307.9102 724.7964 l308.8828 726.4434 l309.9316 728.0435 l311.0508 729.5923 l312.2393 731.0894 l312.9463 731.9043 l313.6855 732.6904 l314.4551 733.4453 l315.1719 734.0884 l315.9141 734.6992 l316.6855 735.2754 l317.1191 735.5684 l317.5635 735.8413 l318.0215 736.0923 l318.4902 736.3213 l318.9707 736.5283 l319.4297 736.7007 l319.8965 736.8496 l320.3701 736.9746 l320.8496 737.0757 l321.334 737.1523 l321.9365 737.2163 l322.543 737.2495 l323.1484 737.2515 l323.7549 737.2227 l324.2051 737.1782 l324.6553 737.1143 l325.1016 737.0313 l325.5449 736.9282 l325.9814 736.8052 l326.8408 736.5215 l327.6846 736.1973 l328.5137 735.8325 l329.3223 735.4292 l330.1123 734.9883 l330.8809 734.5093 l331.625 733.9946 l332.3135 733.4673 l332.9756 732.9053 l333.6094 732.3125 l334.2129 731.6875 l334.7832 731.0347 l335.3213 730.3535 l335.8252 729.6465 l336.6895 728.2993 l337.4883 726.9136 l338.2207 725.4912 l338.8682 724.0664 l339.4473 722.6113 l339.9541 721.1304 l341.1113 717.1523 l342.0908 713.1265 l342.9893 708.6133 l343.707 704.0684 l344.4551 697.7334 l344.9658 691.3745 l345.2217 685.2095 l345.2363 679.0396 l345.043 673.3501 l344.6533 667.6724 l342.6064 648.5796 l341.2227 641.1196 l340.2227 635.6284 l340.2295 635.1665 l340.2568 634.7056 l340.3027 634.2446 l340.3691 633.7876 l340.4482 633.3774 l340.5479 632.9712 l340.665 632.5718 l340.8027 632.1763 l340.957 631.7896 l341.1504 631.3911 l341.3799 631.0132 l341.6729 630.6099 l341.9971 630.23 l342.3145 629.9155 l342.6563 629.6284 l343.0215 629.3696 l343.4043 629.1421 l343.8047 628.9487 l344.2207 628.7876 l344.6582 628.6567 l345.1055 628.5591 l345.5586 628.4985 l346.0146 628.4712 l346.4385 628.4956 l346.8535 628.5825 l349.2471 629.1196 l351.2236 631.5532 l352.665 634.1118 l353.9033 637.8003 l354.6729 640.3599 l355.2217 642.8921 l357.1738 652.9302 l358.0469 658.1089 l359.0479 667.4419 l359.6494 675.9312 l359.9316 684.437 l359.9102 688.6982 l359.7285 692.9556 l359.3838 697.2017 l358.8799 701.4204 l358.2148 705.6162 l357.3906 709.7847 l356.377 713.9883 l355.1738 718.1426 l353.7891 722.2246 l352.2236 726.2393 l351.3652 728.2065 l350.4414 730.1426 l349.4531 732.0464 l348.5049 733.7285 l347.4922 735.3735 l346.4209 736.9785 l345.6875 737.9854 l344.9092 738.9595 l344.0889 739.8975 l343.2275 740.7974 l342.2764 741.7095 l341.2871 742.5815 l340.2627 743.4106 l339.2031 744.1963 l338.2695 744.8315 l337.3115 745.4282 l336.3291 745.9873 l335.3262 746.5073 l334.2725 747.0015 l333.1992 747.4556 l332.1094 747.8687 l331.0049 748.2373 l329.9072 748.5586 l328.7998 748.8354 l327.6807 749.0684 l326.5547 749.2583 l325.5283 749.3872 l324.4971 749.4727 l323.4648 749.5122 l322.4307 749.5083 l321.3164 749.4536 l320.2061 749.3477 l319.1025 749.1895 l318.0078 748.9814 l316.7393 748.6846 l315.4844 748.3364 l314.2441 747.9395 l313.0195 747.4946 l311.6094 746.9155 l310.2256 746.2793 l308.8691 745.5874 l307.541 744.8394 l306.4102 744.1353 l305.3125 743.3784 l304.2539 742.5703 l303.2334 741.7134 l301.8867 740.4727 l300.5957 739.1724 l299.3652 737.8164 l298.1963 736.4063 l297.0732 734.9224 l296.0166 733.3906 l295.0283 731.8135 l294.1104 730.1943 l292.2637 726.5732 l290.5781 722.8745 l289.0586 719.1035 l287.8379 715.6162 l286.7871 712.0742 l285.9121 708.4854 l284.3877 700.7944 l283.1621 693.0503 l281.9893 683.4771 l281.1191 673.8716 l280.1387 658.4253 l279.416 643.7915 l278.7813 629.1548 l278.1514 612.769 l277.8574 603.8071 l277.4531 586.1978 l277.1934 569.6558 l261.9795 567.519 l243.2148 564.1138 l231.2051 561.1978 l222.748 558.6851 l217.5527 557.1001 l216.9707 556.9067 l216.3955 556.6938 l215.5586 556.3521 l214.7324 555.9858 l211.3438 554.355 l208.8711 553.0571 l207.9492 552.5356 l207.043 551.9888 l206.6006 551.6997 l206.1719 551.3892 l205.7607 551.0591 l205.3643 550.7104 l204.998 550.355 l204.6504 549.9819 l204.3203 549.5933 l204.0117 549.188 l203.7441 548.7896 l203.5107 548.3716 l203.3096 547.936 l203.1426 547.4868 l203.0107 546.9761 l202.9434 546.4536 l202.9434 545.9253 l203 545.5503 l203.1025 545.146 l203.2197 544.7466 l203.3535 544.3511 l203.5039 543.9624 l203.6553 543.6304 l203.8359 543.312 l204.041 543.0103 l204.3008 542.7046 l204.6045 542.438 l205.0293 542.1519 l205.4834 541.9136 l205.8809 541.7466 l206.2871 541.603 l206.7031 541.4868 l207.125 541.394 l207.5566 541.3374 l207.9941 541.3276 l208.4287 541.3647 l208.8691 541.4341 l209.3047 541.52 l209.7383 541.6245 l210.166 541.7437 l212.0508 542.3442 l213.9141 543.0103 l214.7256 543.2983 l215.5469 543.5552 l220.6396 544.9731 l229.791 547.3979 l242.3125 550.5054 l251.6152 552.4507 l259.9717 553.8335 l276.7891 556.0874 l276.9922 556.0874 l276.9629 522.3618 l228.8965 520.6948 l210.6816 519.8999 l192.4746 518.9604 l179.2134 518.1528 l165.9624 517.2017 l154.6074 516.2622 l143.2646 515.1987 l122.2026 512.8032 l117.2646 512.1431 l102.8213 509.9565 l90.7544 507.856 l89.4683 507.5874 l88.1924 507.2729 l86.9287 506.9155 l85.8213 506.5571 l84.7285 506.1567 l83.6533 505.7124 l83.1914 505.4937 l82.7446 505.2466 l82.3135 504.9712 l81.9014 504.6694 l81.5093 504.3413 l81.1387 503.9907 l80.8267 503.5815 l80.6304 503.105 l80.5645 502.5952 l80.5645 502.5669 l80.5776 500.0103 l80.5933 499.8813 l80.7295 499.4917 l80.9487 499.1411 l81.2256 498.8296 l81.5317 498.5454 l81.8633 498.2935 l82.2407 498.0503 l82.6304 497.8276 l83.0327 497.6265 l83.4443 497.4478 l83.8115 497.313 l84.1855 497.2026 l84.5664 497.1157 l84.9526 497.0522 l85.8975 496.9478 l86.8467 496.8833 l87.7964 496.8589 l89.6533 496.895 l91.5054 497.0229 l110.0684 498.7554 l130.8174 500.6284 lf1 D291.8877 556.7612 m310.7676 557.772 l341.541 557.7144 l362.4131 556.061 l383.3145 553.0522 l388.8623 552.0806 394.3848 550.9614 399.873 549.6978 c404.5234 548.6265 409.1396 547.4106 413.7139 546.0513 c420.041 544.189 426.2461 541.9126 432.2764 539.2388 c436.0342 537.5669 439.6289 535.5229 442.9863 533.147 c445.1602 531.6538 447.0977 529.814 448.7021 527.7202 c449.9023 526.0991 450.7373 524.2114 451.1289 522.2339 c451.2578 521.6284 451.2256 520.9897 451.0352 520.4019 c450.9248 520.0562 450.7598 519.729 450.5508 519.4341 c450.2129 518.937 449.8086 518.4839 449.3535 518.0903 c448.8789 517.6792 448.3467 517.3345 447.7783 517.0679 c446.6768 516.5669 445.5234 516.1792 444.3438 515.9126 c442.3594 515.4038 440.3076 515.1597 438.2598 515.188 c437.0156 515.1948 435.7715 515.2241 434.5273 515.2778 c427.1377 515.5952 l418.8525 515.9702 l409.3545 516.4614 l397.6914 517.269 l381.0635 518.2222 l334.9307 520.5601 l291.8877 521.7153 l291.916 556.7612 l291.8877 556.7612 lf*UULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_shading_AI8 /terminate get execAdobe_ColorImage_AI6 /terminate get execAGM_Gradient /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF